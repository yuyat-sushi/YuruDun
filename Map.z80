;最初にマップデータをロードするとき
MapLoad:
        ;マップデータをRAMに転送する
	ld      bc, 10*8
        ld      de, m_MapData
        ld      hl, _MapData1
        call    LDIR
	;敵の配置
	call	__SetEnemy
	;プレイヤーの配置
	call	__SetPlayer
	AdressLD	MapAwake, _SceneAdress
        ret 

;マップ画面になったとき
MapAwake:
        ;VRAM操作するため、スクリーンをオフに
        call    ScreenOff
        ;グラフィックデータをVRAMに転送する
        ;BGデータ
	ld      bc, 56*16
        ld      de, _VRAM + $1000
        ld      hl, _MapBGTile
        call    LDIR
        ;Spデータ
	ld      bc, 65*16
        ld      de, _VRAM
        ld      hl, _MapSpTile
        call    LDIR
	;マップデータをBGに
        ld      de,m_MapData
        call    __SetMapData

	;ステータス描画
	ld	bc,$1402
	ld	de,_StatusMap
	ld	hl,_SCRN1
	call	__SetTileMap
	
	ld	a,8
	ldh	[rWX],a
	ld	a,128
	ldh 	[rWY], a

        ;描画処理終了
        call    ScreenOnVB
	AdressLD	MapUpdate, _SceneAdress
        ret

;マップ画面で毎フレーム行うこと
MapUpdate:
	call __DrawEnemySprite		;敵のスプライト
	call __DrawPlayerSprite		;プレイヤーのスプライト
        ret

;マップ画面のVblank中に行う事
MapVblack:

        ret



;----------------------------------------------------------------------------
;通常マップ定義
;bc = 幅・高さ
;de = 読み込み元アドレス
;hl = 定義先アドレス
;----------------------------------------------------------------------------
__SetTileMap:
	push	bc	;幅と高さを記憶

.loop:
	ld	a,[de]	;書き込み処理
	inc	de
	ld	[hl+],a
	dec	b
	jr	nz,.loop

	ld	a,c	;幅のリセット
	pop	bc	
	ld	c,a
	push	bc
	
	ld	a,b	;b = 32の時の２重ループ防止
	cp	a,32
	jr	z,.skip
	
	ld	a,l	;32バイト分進める
	sub	a,b	;32 - 横幅
	add	a,32
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	
.skip:
	dec	c
	jr	nz,.loop

	pop	bc
	ret

;マップ定義
;de = 読み込み先マップデータ
__SetMapData
        ld bc, $0A08    ;幅10,高さ8
        ld hl, _SCRN0

.loop:
	ld	a,[de]	;書き込み処理
        add     a,a     ;マップ番号*4+32
        add     a,a
        add     a,$20
	ld	[hl+],a
        inc     a
        ld      [hl+],a
        inc     a

        push    af
        ld	a,l	;1列先に配置する
	add	a,30
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
        pop     af

	ld	[hl+],a
        inc     a
        ld      [hl+],a

        ld	a,l	;1列の後ろに配置する
	sub	a,32
	ld	l,a
	ld	a,h
	sbc	a,0
	ld	h,a

	inc	de
	dec	b
	jr	nz,.loop

        ld      b, $0A

	ld	a,l	;2列先の一番初めに配置する
	add	a,44
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	
	dec	c
	jr	nz,.loop
        ret

;------------------------------------------------
;プレイヤーの配置
;------------------------------------------------
__SetPlayer:
	ld	bc,$0A08	;幅10高さ8
	ld	de,m_MapData	;マップデータ書き込み
.loop:
	ld	a,[de]
	cp	7
	jr	nz,.skip	;マップデータが6(enemy)でない場合、スキップ

	ld	hl,m_PlayerX	;X座標指定
	ld	a,10		;10-b
	sub	a,b
	ld	[hl],a

	ld	hl,m_PlayerY	;Y座標指定
	ld	a,8		;8-c
	sub	a,c
	ld	[hl],a

	ld	a,2		;7(player)を2(floor)に変換
	ld	[de],a

	jr	.end		;playerは一つだけなので、一つ設置出来た場合.endへ

.skip:
	inc	de
	dec	b
	jr	nz,.loop
	ld	b,$0A
	dec	c
	jr	nz,.loop
.end:
	ret

;------------------------------------------------
;プレイヤーの配置
;------------------------------------------------
__MovePlayer:
	;ウェイト待ちか？
	ld	a,[m_PlayerWait]
	cp	0
	jr	nz,.waiting
	;ウェイト待ちじゃなかった場合
.move
	jr	.end
	;ウェイト待ちだった場合
.waiting:
.end
	ret

;------------------------------------------------
;プレイヤーキャラクターの描画
;------------------------------------------------
__DrawPlayerSprite:
	ld	hl,OAM_BUFFER0
	;敵キャラクターが存在する場合
	ld	c,4
.loop:
	;Y座標
	ld	a,[m_PlayerY]
	add	a,a
	add	a,a
	add	a,a
	add	a,a
	add	a,16

	ld	d,a
	ld	a,4
	sub	a,c
	and	a,2
	add	a,a
	add	a,a
	add	a,d

	ld	[hl+],a

	;X座標
	ld	a,[m_PlayerX]		;書き込み元アドレスを指定
	add	a,a
	add	a,a
	add	a,a
	add	a,a
	add	a,8

	ld	d,a
	ld	a,4
	sub	a,c
	and	a,1
	add	a,a
	add	a,a
	add	a,a
	add	a,d

	ld	[hl+],a


	;パターン
	ld	a,4
	sub	a,c
	ld	[hl+],a

	;アトリビュート
	xor	a
	ld	[hl+],a

	dec	c
	jr	nz,.loop
	ret

;------------------------------------------------
;敵の配置
;------------------------------------------------
__SetEnemy:
	ld	bc,$0A08	;幅10高さ8
	ld	de,m_MapData	;マップデータ書き込み
.loop:
	ld	a,[de]
	cp	6
	jr	nz,.skip	;マップデータが6(enemy)でない場合、スキップ

	ld	hl,m_EnemyX	;X座標指定
	ld	a,[m_EnemyCount]
	add	a,l
	ld	l,a
	ld	a,10		;10-b
	sub	a,b
	ld	[hl],a	

	ld	hl,m_EnemyY	;Y座標指定
	ld	a,[m_EnemyCount]
	add	a,l
	ld	l,a
	ld	a,8		;8-c
	sub	a,c
	ld	[hl],a

	ld	hl,m_EnemyType	;タイプ指定
	ld	a,[m_EnemyCount]
	add	a,l
	ld	l,a
	ld	a,1
	ld	[hl],a

	ld	a,[m_EnemyCount];敵の数を上昇
	inc	a
	ld	[m_EnemyCount],a

	ld	a,2		;6(enemy)を2(floor)に変換
	ld	[de],a

.skip:
	inc	de
	dec	b
	jr	nz,.loop
	ld	b,$0A
	dec	c
	jr	nz,.loop
	ret

;------------------------------------------------
;敵キャラクターの描画
;------------------------------------------------
__DrawEnemySprite:
	ld	a,[m_EnemyCount]
	ld	b,4
	ld	hl,OAM_BUFFER0 + 16
.loop:
	ld	a,[m_EnemyType]
	cp	0
	jr	z,.blank		;EnemyTypeが0(何もない)の場合、ブランク化処理へ
	;敵キャラクターが存在する場合
	ld	c,4
.eloop:
	;Y座標
	ld	de,m_EnemyY		;書き込み元アドレスを指定
	ld	a,e
	add	a,4
	sub	a,b
	ld	e,a

	ld	a,[de]
	add	a,a
	add	a,a
	add	a,a
	add	a,a
	add	a,16

	ld	d,a			;書き込み元を読み込んだ時点でdeは用済みとなる
	ld	a,4
	sub	a,c
	and	a,2
	add	a,a
	add	a,a
	add	a,d

	ld	[hl+],a

	;X座標
	ld	de,m_EnemyX		;書き込み元アドレスを指定
	ld	a,e
	add	a,4
	sub	a,b
	ld	e,a

	ld	a,[de]
	add	a,a
	add	a,a
	add	a,a
	add	a,a
	add	a,8

	ld	d,a			;書き込み元を読み込んだ時点でdeは用済みとなる
	ld	a,4
	sub	a,c
	and	a,1
	add	a,a
	add	a,a
	add	a,a
	add	a,d

	ld	[hl+],a


	;パターン
	ld	a,8
	sub	a,c
	ld	[hl+],a

	;アトリビュート
	xor	a
	ld	[hl+],a

	dec	c
	jr	nz,.eloop
	
	jr	.end
.blank:
	ld	c,16
	xor	a
.bloop:
	ld [hl+],a
	dec	c
	jr	nz,.bloop
.end:
	dec	b
	jr	nz,.loop
	ret