;最初にマップデータをロードするとき
MapLoad:
        ;マップデータをRAMに転送する
	ld      bc, 10*8
        ld      de, m_MapData
        ld      hl, _MapData1
        call    LDIR
	;敵の配置
	call	m_SetEnemy
	;プレイヤーの配置
	call	m_SetPlayer
	AdressLD	MapAwake, _SceneAdress
        ret 

;マップ画面になったとき
MapAwake:
        ;VRAM操作するため、スクリーンをオフに
        call    ScreenOff
        ;グラフィックデータをVRAMに転送する
        ;共通データ
	ld      bc, 32*16
        ld      de, _VRAM + $1000
        ld      hl, _TextTile
        call    LDIR
	;BGデータ
	ld      bc, 24*16
        ld      de, _VRAM + $1200
        ld      hl, _MapBGTile
        call    LDIR
        ;Spデータ
	ld      bc, 65*16
        ld      de, _VRAM
        ld      hl, _MapSpTile
        call    LDIR
	;マップデータをBGに
        ld      de,m_MapData
        call    m_SetMapData

	;ステータス描画
	ld	bc,$1402
	ld	de,_StatusMap
	ld	hl,_SCRN1
	call	g_SetTileMap
	
	ld	a,8
	ldh	[rWX],a
	ld	a,128
	ldh 	[rWY], a

        ;描画処理終了
        call    ScreenOnVB
	AdressLD	MapUpdate, _SceneAdress
	AdressLD	MapVblack, _VblankAdress
        ret

;マップ画面で毎フレーム行うこと
MapUpdate:
	;入力・処理
	call	m_MovePlayer		;プレイヤーの移動
	call	m_MoveEnemy		;敵の移動
	;描画準備
	call	m_DrawEnemySprite		;敵のスプライト
	call	m_DrawPlayerSprite		;プレイヤーのスプライト
	call	m_SetParameter
        ret

;マップ画面のVblank中に行う事
MapVblack:
        ;文字表示
        ld      bc,$0502
        ld      de,m_PlayerParameterBuffer1
        ld      hl,_SCRN1 + $03
        call    g_SetTileMap
        ld      bc,$0502
        ld      de,m_PlayerParameterBuffer2
        ld      hl,_SCRN1 + $0F
        call    g_SetTileMap
        ret

;----------------------------------------------------------------------------
;マップ定義
;de = 読み込み先マップデータ
;----------------------------------------------------------------------------
m_SetMapData
        ld bc, $0A08    ;幅10,高さ8
        ld hl, _SCRN0

.loop:
	ld	a,[de]	;書き込み処理
        add     a,a     ;マップ番号*4+32
        add     a,a
        add     a,$20
	ld	[hl+],a
        inc     a
        ld      [hl+],a
        inc     a

        push    af
        ld	a,l	;1列先に配置する
	add	a,30
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
        pop     af

	ld	[hl+],a
        inc     a
        ld      [hl+],a

        ld	a,l	;1列の後ろに配置する
	sub	a,32
	ld	l,a
	ld	a,h
	sbc	a,0
	ld	h,a

	inc	de
	dec	b
	jr	nz,.loop

        ld      b, $0A

	ld	a,l	;2列先の一番初めに配置する
	add	a,44
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	
	dec	c
	jr	nz,.loop
        ret

;------------------------------------------------
;プレイヤーの配置
;------------------------------------------------
m_SetPlayer:
	ld	bc,$0A08	;幅10高さ8
	ld	de,m_MapData	;マップデータ書き込み
.loop:
	ld	a,[de]
	cp	7
	jr	nz,.skip	;マップデータが6(enemy)でない場合、スキップ

	ld	hl,m_PlayerX	;X座標指定
	ld	a,10		;10-b
	sub	a,b
	ld	[hl],a

	ld	hl,m_PlayerY	;Y座標指定
	ld	a,8		;8-c
	sub	a,c
	ld	[hl],a

	ld	a,2		;7(player)を2(floor)に変換
	ld	[de],a

	jr	.end		;playerは一つだけなので、一つ設置出来た場合.endへ

.skip:
	inc	de
	dec	b
	jr	nz,.loop
	ld	b,$0A
	dec	c
	jr	nz,.loop
.end:
	ret

;------------------------------------------------
;プレイヤーの移動
;------------------------------------------------
m_MovePlayer:
	;ウェイト待ちか？
	ld	a,[m_PlayerWait]
	cp	0
	jp	nz,.waiting
	;ウェイト待ちじゃなかった場合
.move:
	;現在の座標をMapDataの現在位置のアドレスに変換する
	ld	a,[m_PlayerX]		;X座標
	ld	d,a
	ld	a,[m_PlayerY]		;Y座標
	ld	hl,m_MapData		;マップデータアドレス先頭
	ld	e,a
	add	a,a			;Y座標*10+X座標の番地に現在位置がある
	add	a,a
	add	a,a
	add	a,e
	add	a,e
	add	a,d
	add	a,l
	ld	l,a

	;ボタン入力で方向を決める
	ld	a,[_Pad]
	bit	4,a
	jr	nz,.right
	bit	5,a
	jr	nz,.left
	bit	6,a
	jr	nz,.up
	bit	7,a
	jr	nz,.down
	jp	.end
	;移動先の地形データをbに代入する
.left:
	;アドレスを移動先にする	
	ld	a,l
	sub	a,1
	ld	l,a

	;座標を移動先にする
	ld	a,d
	sub	a,1
	ld	d,a

	jp	.endif
.right:
	;アドレスを移動先にする
	ld	a,l
	add	a,1
	ld	l,a

	;座標を移動先にする
	ld	a,d
	add	a,1
	ld	d,a

	jp	.endif
.up:
	;アドレスを移動先にする	
	ld	a,l
	sub	a,10
	ld	l,a

	;座標を移動先にする
	ld	a,e
	sub	a,1
	ld	e,a

	jp	.endif
.down:
	;アドレスを移動先にする	
	ld	a,l
	add	a,10
	ld	l,a

	;座標を移動先にする
	ld	a,e
	add	a,1
	ld	e,a

	jp	.endif
.endif:
	;移動先の地形データをbに代入する
	ld	a,[hl]
	ld	b,a
	;それが移動可能だった場合、x=d,y=eに移動させる
	ld	a,b
	cp	2
	jr	c,.wall		;0,1は壁、移動せずに処理終了
	cp	3
	jr	z,.stair	;3は階段、マップを切り替える
	;敵が存在した場合、戦闘を行う
	;bは地形データ判定後は不要なため、ループ変数にする
	ld	b,0
.enemyloop:
	ld	hl,m_EnemyType	;存在しない場合、スキップ	
	ld	a,l
	add	a,b
	ld	l,a
	ld	a,[hl]
	cp	0
	jr	z,.notEqual	
	ld	hl,m_EnemyX	;x座標の比較
	ld	a,l
	add	a,b
	ld	l,a
	ld	a,[hl]
	cp	d
	jr	nz,.notEqual
	ld	hl,m_EnemyY	;y座標の比較
	ld	a,l
	add	a,b
	ld	l,a
	ld	a,e
	ld	a,[hl]
	cp	e
	jr	nz,.notEqual
	;戦闘に入る
	ld	a,b
	ld	[b_EnemyNumber],a
	AdressLD	BattleLoad, _SceneAdress	
	jr	.wall		;壁扱いして、終了する
.notEqual:			;座標が不一致だった場合
	inc	b
	ld	a,b
	cp	4
	jr	nz,.enemyloop

	;移動を反映する
	ld	a,d
	ld	[m_PlayerX],a
	ld	a,e
	ld	[m_PlayerY],a
	;移動に成功したのでウェイトを追加する
	ld	a,8
	ld	[m_PlayerWait],a
.wall:
	jr	.end
.stair:
	;新しいマップにする
	ld	hl,m_FloorNumber
	inc	[hl]
	AdressLD	MapLoad, _SceneAdress
	jr	.end
.waiting:
	;ウェイト待ちだった場合
	ld	hl,m_PlayerWait
	dec	[hl]
.end:
	ret

;------------------------------------------------
;プレイヤーキャラクターの描画
;------------------------------------------------
m_DrawPlayerSprite:
	ld	hl,OAM_BUFFER0
	;使用スプライト数
	ld	c,4
.loop:
	;Y座標
	ld	a,[m_PlayerY]
	add	a,a
	add	a,a
	add	a,a
	add	a,a
	add	a,16

	ld	d,a
	ld	a,4
	sub	a,c
	and	a,2
	add	a,a
	add	a,a
	add	a,d

	ld	[hl+],a

	;X座標
	ld	a,[m_PlayerX]		;書き込み元アドレスを指定
	add	a,a
	add	a,a
	add	a,a
	add	a,a
	add	a,8

	ld	d,a
	ld	a,4
	sub	a,c
	and	a,1
	add	a,a
	add	a,a
	add	a,a
	add	a,d

	ld	[hl+],a


	;パターン
	ld	a,4
	sub	a,c
	ld	[hl+],a

	;アトリビュート
	xor	a
	ld	[hl+],a

	dec	c
	jr	nz,.loop
	ret

;------------------------------------------------
;敵の配置
;------------------------------------------------
m_SetEnemy:
	xor	a
	ld	[m_EnemyCount],a;敵の数をリセット
	ld	bc,$0A08	;幅10高さ8
	ld	de,m_MapData	;マップデータ書き込み
.loop:
	ld	a,[de]
	cp	6
	jr	nz,.skip	;マップデータが6(enemy)でない場合、スキップ

	ld	hl,m_EnemyX	;X座標指定
	ld	a,[m_EnemyCount]
	add	a,l
	ld	l,a
	ld	a,10		;10-b
	sub	a,b
	ld	[hl],a	

	ld	hl,m_EnemyY	;Y座標指定
	ld	a,[m_EnemyCount]
	add	a,l
	ld	l,a
	ld	a,8		;8-c
	sub	a,c
	ld	[hl],a

	ld	hl,m_EnemyType	;タイプ指定
	ld	a,[m_EnemyCount]
	add	a,l
	ld	l,a
	ld	a,1
	ld	[hl],a

	ld	a,[m_EnemyCount];敵の数を上昇
	inc	a
	ld	[m_EnemyCount],a

	ld	a,2		;6(enemy)を2(floor)に変換
	ld	[de],a

.skip:
	inc	de
	dec	b
	jr	nz,.loop
	ld	b,$0A
	dec	c
	jr	nz,.loop
	ret

;------------------------------------------------
;敵の移動
;------------------------------------------------
m_MoveEnemy:
	ld	c,0			;ループ変数リセット、敵の数分ループする
.loop:
	;敵のタイプは何か？
	ld	hl,m_EnemyType
	ld	a,l
	add	a,c
	ld	l,a
	ld	a,[hl]
	cp	0
	jp	z,.end			;タイプが何もない（0）場合、ループは終了
	;ウェイト待ちか？
	ld	hl,m_EnemyWait
	ld	a,l
	add	a,c
	ld	l,a
	ld	a,[hl]
	cp	0
	jp	nz,.waiting
	;ウェイト待ちじゃなかった場合
.move:
	;現在の座標をMapDataの現在位置のアドレスに変換する
	ld	hl,m_EnemyX		;X座標
	ld	a,l
	add	a,c
	ld	l,a
	ld	a,[hl]	
	ld	d,a
	ld	hl,m_EnemyY		;Y座標
	ld	a,l
	add	a,c
	ld	l,a
	ld	a,[hl]
	ld	hl,m_MapData		;マップデータアドレス先頭
	ld	e,a
	add	a,a			;Y座標*10+X座標の番地に現在位置がある
	add	a,a
	add	a,a
	add	a,e
	add	a,e
	add	a,d
	add	a,l
	ld	l,a

	;乱数で方向を決める
	call	Rand8
	ld	a,[Seed]
	cp	64		;乱数が0~63だった場合、→へ
	jr	c,.right
	cp	128		;乱数が64~127だった場合、←へ
	jr	c,.left
	cp	192		;乱数が128~191だった場合、↑へ
	jr	c,.up		
	jr	.down		;乱数が192~255だった場合、↓へ
	;移動先の地形データをbに代入する
.left:
	;アドレスを移動先にする	
	ld	a,l
	sub	a,1
	ld	l,a

	;座標を移動先にする
	ld	a,d
	sub	a,1
	ld	d,a

	jp	.endif
.right:
	;アドレスを移動先にする
	ld	a,l
	add	a,1
	ld	l,a

	;座標を移動先にする
	ld	a,d
	add	a,1
	ld	d,a

	jp	.endif
.up:
	;アドレスを移動先にする	
	ld	a,l
	sub	a,10
	ld	l,a

	;座標を移動先にする
	ld	a,e
	sub	a,1
	ld	e,a

	jp	.endif
.down:
	;アドレスを移動先にする	
	ld	a,l
	add	a,10
	ld	l,a

	;座標を移動先にする
	ld	a,e
	add	a,1
	ld	e,a

	jp	.endif
.endif:
	;移動先の地形データをbに代入する
	ld	a,[hl]
	ld	b,a
	;それが移動可能だった場合、x=d,y=eに移動させる
	ld	a,b
	cp	2
	jr	c,.wall		;0,1は壁、移動せずに処理終了
	;敵が存在した場合、移動を止める
	;bは地形データ判定後は不要なため、ループ変数にする
	ld	b,0
.enemyloop:
	;移動先に自分の番号の座標はないので、自分の番号比較は行わない
	ld	hl,m_EnemyType	;存在しない場合、スキップ	
	ld	a,l
	add	a,b
	ld	l,a
	ld	a,[hl]
	cp	0
	jr	z,.notEqual
	ld	hl,m_EnemyX	;x座標の比較
	ld	a,l
	add	a,b
	ld	l,a
	ld	a,[hl]
	cp	d
	jr	nz,.notEqual
	ld	hl,m_EnemyY	;y座標の比較
	ld	a,l
	add	a,b
	ld	l,a
	ld	a,e
	ld	a,[hl]
	cp	e
	jr	nz,.notEqual
	jr	.wall		;自分じゃない敵の座標と移動先が同じだった場合、壁扱いする
.notEqual:			;座標が不一致だった場合
	inc	b
	ld	a,b
	cp	4
	jr	nz,.enemyloop
	;プレイヤーとの接触時、戦闘開始
	ld	a,[m_PlayerX]	;x座標の比較
	cp	d
	jr	nz,.notEqualPlayer
	ld	a,[m_PlayerY]	;y座標の比較
	cp	e
	jr	nz,.notEqualPlayer
	;戦闘に入る
	ld	a,c
	ld	[b_EnemyNumber],a
	AdressLD	BattleLoad, _SceneAdress	
	jr	.wall		;壁扱いして、終了する
.notEqualPlayer:
	;移動を反映する
	ld	hl,m_EnemyX
	ld	a,l
	add	a,c
	ld	l,a
	ld	a,d
	ld	[hl],a
	ld	hl,m_EnemyY
	ld	a,l
	add	a,c
	ld	l,a
	ld	a,e
	ld	[hl],a
	;移動に成功したのでウェイトを追加する
	ld	hl,m_EnemyWait
	ld	a,l
	add	a,c
	ld	l,a
	ld	a,32
	ld	[hl],a
.wall:
	jr	.end
.waiting:
	;ウェイト待ちだった場合
	ld	hl,m_EnemyWait
	ld	a,l
	add	a,c
	ld	l,a
	dec	[hl]
.end:
	inc	c
	ld	a,c
	cp	4
	jp	nz,.loop
	ret

;------------------------------------------------
;敵キャラクターの描画
;------------------------------------------------
m_DrawEnemySprite:
	ld	a,[m_EnemyCount]
	ld	b,a
	ld	hl,OAM_BUFFER0 + 16
.loop:
	ld	de,m_EnemyType
	ld	a,e
	add	a,4
	sub	a,b
	ld	e,a
	ld	a,[de]		
	cp	0
	jr	z,.blank		;EnemyTypeが0(何もない)の場合、ブランク化処理へ
	;敵キャラクターが存在する場合
	ld	c,4
.eloop:
	;Y座標
	ld	de,m_EnemyY		;書き込み元アドレスを指定
	ld	a,e
	add	a,4
	sub	a,b
	ld	e,a

	ld	a,[de]
	add	a,a
	add	a,a
	add	a,a
	add	a,a
	add	a,16

	ld	d,a			;書き込み元を読み込んだ時点でdeは用済みとなる
	ld	a,4
	sub	a,c
	and	a,2
	add	a,a
	add	a,a
	add	a,d

	ld	[hl+],a

	;X座標
	ld	de,m_EnemyX		;書き込み元アドレスを指定
	ld	a,e
	add	a,4
	sub	a,b
	ld	e,a

	ld	a,[de]
	add	a,a
	add	a,a
	add	a,a
	add	a,a
	add	a,8

	ld	d,a			;書き込み元を読み込んだ時点でdeは用済みとなる
	ld	a,4
	sub	a,c
	and	a,1
	add	a,a
	add	a,a
	add	a,a
	add	a,d

	ld	[hl+],a


	;パターン
	ld	a,8
	sub	a,c
	ld	[hl+],a

	;アトリビュート
	xor	a
	ld	[hl+],a

	dec	c
	jr	nz,.eloop
	
	jr	.end
.blank:
	ld	c,16
	xor	a
.bloop:
	ld [hl+],a
	dec	c
	jr	nz,.bloop
.end:
	dec	b
	jr	nz,.loop
	ret

m_SetParameter:
        ;味方のパラメーター表示
        ld      a,[b_PlayerHP]
        ld      b,a
        ld      a,[b_PlayerHP+1]
        ld      c,a
        ld      d,$10
        ld      hl,m_PlayerParameterBuffer1
        call    g_Set5BCDBG
        ld      a,[b_PlayerATK]
        ld      b,a
        ld      a,[b_PlayerATK+1]
        ld      c,a
        ld      d,$10
        ld      hl,m_PlayerParameterBuffer2
        call    g_Set5BCDBG
        ld      a,[b_PlayerAS]
        ld      c,a
        ld      d,$10
        ld      hl,m_PlayerParameterBuffer2 + 7
        call    g_Set3BCDBG
        ret