;	gb_routine.z80
;	Original Source by http://mydocuments.g2.xrea.com/
;*********************************************************
;汎用初期化
;	　　メモリ＆ＶＲＡＭ＆フラグ＆音源＆割り込みのリセット
;	　　スプライトルーチンの常駐化、パレットの初期化
;*********************************************************

Initialize:								;初期スタックポインタ = $FFFE
	pop			de

	call		ScreenOff

	xor			a						;GB 内部 RAM $C000-$DFFF(8KB) クリア
	ld			hl,$C000
	ld			bc,$2000				;スタックポインタをこの領域に配置しないこと。
	call		Mem_Set
	ld			sp,$DF00
	push		de

	ld			hl,$FF80
	ld			bc,$7F
	call		Mem_Set					; HI-RAM $FF80-$FFFE クリア

;	ld			a,[$0149]				;カートリッジヘッダの RAM サイズ
;	ld			e,1
;	cp			3
;	jr			c,.loop2				;$02:8KB(1bank) $01:2KB $00:none
;	ld			e,4						;$03:32KB(4bank)
;	jr			z,.loop2
;	ld			e,16
;	dec			a						;$04:128KB(16bank)
;	jr			z,.loop2
;	ld			e,8						;$05:64KB(8bank)
;.loop2:
;	ld			a,e
;	ld			[rRAMB],a
;	xor			a
;	ld			hl,$A000				;カートリッジ側 RAM ($A000-$BFFF)クリア #0-3
;	ld			bc,$2000				;バックアップ SRAM の場合はセーブデータが消えるので注意
;	call		Mem_Set
;	dec			e
;	bit			7,e
;	jr			z,.loop2

	xor			a
	ldh			[rIF],a					;Interrupt request RESET
	ldh			[rIE],a
	ldh			[rSTAT],A				;LCDC status information RESET
	ldh			[rSCX],a				;Scroll X register RESET
	ldh			[rSCY],a				;Scroll Y register RESET

	ld			a,144
	ldh			[rWY],a					;Window Y 非表示
	ld			a,167
	ldh			[rWX],a					;Window X 非表示

	ld			a,$E4					;BGパレット指定
	ldh			[rBGP],a

	ld			a,$E0					;OBJ0パレット指定
	ldh			[rOBP0],a

	ld			a,$D0					;OBJ1パレット指定
	ldh			[rOBP1],a

	xor			a
	ldh			[rNR52],a				;音源制御

	ld			hl,$8000				;VRAM $8000-$9FFF
	ld			bc,$2000				;TilePattern,TileMap0/1,
	call		Mem_Set					;Attribute.

	ld			hl,$FE00				; スプライト OAM
	ld			bc,160
	call		Mem_Set

	ld			hl,SpriteRoutine
	ld			de,SPRITE_ROUTINE
	ld			bc,SpriteRoutineEnd - SpriteRoutine
	call		LDIR

	call		ScreenOnVB
	ret

;汎用初期化はここまで

;*********************************************************************
;
;  Sprite DMA Transfer
;  HRAMに転送しておき、vsync毎に呼び出し。
;  (スプライトDMA中はHRAM以外アクセス不可のため）
;
;  Transfer Time = 160us(single speed mode)/80us(double speed mode) 672clk 以上であればよい
;
;  OAM_BUFFER ds $A0
;  アドレスの上位バイトをDMAに指定するため、配置に注意。
; 8+12+ (4+12)*37 +4+8 +12+8+12 +16
SpriteRoutine:
	ld			a,OAM_BUFFER0 / 256		;8
	ldh			[rDMA],a				;12
	ld			a,$28					;8
.Wait:
	dec			a						;(4+12)*36+4+8
	jr			nz,.Wait
	ret
SpriteRoutineEnd:


;*********************************************************
; 8bit 乱数生成
;*********************************************************
Rand8:
	push		bc
	ld			a,[Seed]
	ld			b,a
	add			a,a
	add			a,a
	add			a,b
	inc			a
	ld			[Seed],a
	pop			bc
	ret


;*********************************************************
;汎用FILL転送    [hl+]<-A  BC times
;*********************************************************
Mem_Set:
	dec			bc
	inc			b
	inc			c
.loop:
	ld			[hl+],a
	dec			c
	jr			nz,.loop
	dec			b
	jr			nz,.loop
	ret

;*********************************************************
;汎用LDIR転送    [DE]<-[hl] BC times
;*********************************************************
LDIR:
	dec			bc
	inc			b
	inc			c
.loop:
	ld			a,[hl+]
	ld			[de],a
	inc			de
	dec			c
	jr			nz,.loop
	dec			b
	jr			nz,.loop
	ret

;*********************************************************
;汎用LDDR転送    [DE]<-[hl] BC times
;*********************************************************

LDDR:									;[hl]->[de] for bc times.
	dec			bc
	inc			b
	inc			c

.loop:
	ld			a,[hl-]
	ld			[de],a
	dec			de
	dec			c
	jr			nz,.loop
	dec			b
	jr			nz,.loop
	ret


;*********************************************************
; Turn Screen off	LCDC駆動中なら停止させる。
; 
;*********************************************************
ScreenOff:
	ldh			a,[rLCDC]			;LCDC bit7
	rla
	ret			nc					;既に停止していたらret

.loop:
	ldh  		a,[rLY]
	cp   		$90					; vblank待ち
	jr   		c,.loop

	ldh			a,[rLCDC]
	and			%01111111
	ldh   		[rLCDC], a			;LCDC Off
	ret

;********************************************************
; 画面設定と表示＆割り込み設定と開始
;
;********************************************************
ScreenOnVB::
	ld      	a, %11100011
					; LCD Controller = On 				1=ON / 0=OFF
					; Window BaseMap = 0x9C00			1=9C00-9FFF / 0=9800-9BFF
					; Window Visible = ON				1=Visible / 0=Invisible
					; BG Chr 	 = 0x8800				1=8000-8FFF / 0=8800-97FF
					; BG BaseMap = 0x9800				1=9C00-9FFF / 0=9800-9BFF
					; OBJ		 = 8x8					1=16*8 / 0=8*8
					; OBJ		 = On					1=Visible / 0=Invisible
					; BG		 = On					1=Visible / 0=Invisible GBC の場合スプライトの優先順位が手前になるのみ
	ldh			[rLCDC],a	;LCD Controller

.loop:
	ldh			a,[rLY]							;LCD-Y
	cp			$90								;wait VBLANK
	jr			c,.loop

	xor			a								;IEをセットする前にリセット
	ldh			[rIF],a							;Bit 7-5 - 未使用
												;Bit 4   - P10-13入力の立下り
												;Bit 3   - シリアル送信完了
												;Bit 2   - タイマ・オーバーフロー
												;Bit 1   - LCDC状態変化
												;Bit 0   - V-ブランク

	ld			a,IEF_VBLANK | IEF_LCDC | IEF_TIMER
	ldh			[rIE], a

	ret


;********************************************************
; バンクの中から別のバンクに切り替え、実行した後に元のバンクに戻って続行する
; 以下のルーチンを RAM に転送する
;
; 以下のように使用する。現在のバンクは CurBank に入っているものとする
;	ld			a,FuncBank					;別バンクのバンク
;	ld			[TmpBank],a
;	ld			hl,FuncAdr					;別バンクの実行アドレス（hl でなくてもスタックに積めれば何でも良い）
;	push		hl
;	ld			hl,$01D8					;本来のhl
;	rst			$30							;もしくは転送先の RAM アドレス
;
		IF 0
	ld			hl,.toram
	ld			de,SwitchBank
	ld			bc,.end - .toram
	call		LDIR
	ret

.toram:
	ld			[.rega + 1],a				;本来の a（f を持っていくのは難しい）
	ld			a,l
	ld			[.reghl + 1],a
	ld			a,h
	ld			[.reghl + 2],a				;本来の hl

	pop			hl
	ld			a,l
	ld			[.ret + 1],a
	ld			a,h
	ld			[.ret + 2],a				;call bankexec からの戻り先

	pop			hl
	ld			a,l
	ld			[.func + 1],a
	ld			a,h
	ld			[.func + 2],a				;実行するコードのアドレス

	ld			a,[CurBank]
	ld			[.bank + 1],a				;戻り先のバンク

	ld			a,[TmpBank]					;実行するコードのバンク
	ld			[CurBank],a
	ld			[rROMB0],a
.lega:
	ld			a,0
.leghl:
	ld			hl,0
.func:
	call		$0000

.bank:
	ld			a,0
	ld			[CurBank],a
	ld			[rROMB0],a
.reg:
	jp			$0000						;ここまで 63byte
.end:
		ENDC

;********************************************************
;GB音源初期化
;
;********************************************************
Sound_Init:								;レジスタ初期化。
	ld			a,$8F
	ldh			[rNR52],a				;全サウンド駆動
	ld			a,$77
	ldh			[rNR50],a				;マスターボリュームLR最大
	ld			a,$FF
	ldh			[rNR51],a				;全チャンネルLR出力on
	ret

;---------------------------------------------------------------------------
;　16進数2桁→10進数5桁
;  HLに10進化したい数を入れて呼び出し
;  af hl de
;---------------------------------------------------------------------------
bin2dec:
	ld			de,-10000
	xor			a
.b2d10k:
	add			hl,de
	inc			a
	jr			c,.b2d10k
	dec			a
	ld			de,10000
	add			hl,de
	ld			[Decimal],a

	ld			de,-1000
	xor			a
.b2d1k:
	add			hl,de
	inc			a
	jr			c,.b2d1k
	dec			a
	ld			de,1000
	add			hl,de
	ld			[Decimal + 1],a

	ld			de,-100
	xor			a
.b2d100:
	add			hl,de
	inc			a
	jr			c,.b2d100
	dec			a
	ld			de,100
	add			hl,de
	ld			[Decimal + 2],a

	ld			de,-10
	xor			a
.b2d10:
	add			hl,de
	inc			a
	jr			c,.b2d10
	dec			a
	ld			de,10
	add			hl,de
	ld			[Decimal + 3],a

	ld			a,l
	ld			[Decimal + 4],a
	ret

;*********************************************************
;汎用入力判定			workram : _PadDebounce
;  ld	a,[_PadDebounce]		  _Pad
;  bit	PADB_B,a
;  jr	z,NO_PUSH_Loop		reg.: a/bc
;*********************************************************
;rP1 = $FF00
ReadJoystick:
	ld			c,rP1 & $FF			;c = 0
	ld			a,P1F_5				; P15 OutPort 00100000 d-pad
	ld			[c],a				;turn on P15

	ld			a,[c]				;delay
	ld			a,[c]
	ld			a,[c]
	ld			a,[c]

	and			$0F
	swap		a
	ld			b,a					;save to reg.b

	ld			a,P1F_4
	ld			[c],a				;turn on P14 button
	ld			a,[c]				;delay
	ld			a,[c]
	ld			a,[c]
	ld			a,[c]
	ld			a,[c]
	ld			a,[c]

	ld			a,[c]
	ld			a,[c]

	and		    $0F
	or			b
	cpl
	ld  	    b,a

	ldh			a,[_Pad]			; old data
	xor			b
	and			b
	ldh			[_PadDebounce],a	; new push
	ld			a,b
	ldh			[_Pad],a			; old push 押している間=1

	ld			a,P1F_5 | P1F_4		;reset
	ld     		[c],a
	ret

;old  new  result new result
;1 xor 1     0 and 1    0
;1     0     1     0    0
;0     1     1     1    1
;0     0     0     0    0

